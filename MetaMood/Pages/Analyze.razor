@page "/analyze"
@inject HttpClient httpClient;
@inject NavigationManager Navigation
@inject ILocalStorageService localStorage
@inject IJSRuntime JsRuntime
@inject IMapper mapper

<PageTitle>Analyze</PageTitle>

    @if (isReady)
    {

    <div class="analysis-container">
        <div class="analysis-input-container">
            
            @if(isAuthorized)
            {
                <div class="label-and-load-container">
                    <p class="platform-label same-line">Spotify</p>
                    @if(isSpotifyLoading)
                    {
                        <div class="mini-spinner same-line"></div>
                    }
                </div>
                <input class="profile-input" type="text" placeholder="Enter Spotify ID... " @bind="SpotifyID" />
            }
            else
            {
                <p class="platform-label disabler">Spotify</p>
                <input class="profile-input disabler" type="text" placeholder="No authorization... " disabled />
            }

            <div class="label-and-load-container">
                <p class="platform-label same-line">Reddit</p>
                @if(isRedditLoading)
                {
                    <div class="mini-spinner same-line"></div>
                }
            </div>
            <input class="profile-input" type="text" placeholder="Enter Reddit ID... " @bind="RedditID" />

            <div class="label-and-load-container">
                <p class="platform-label same-line">Twitter</p>
                @if (isTwitterLoading)
                {
                    <div class="mini-spinner same-line"></div>
                }
            </div>
            <input class="profile-input" type="text" placeholder="Enter Tweet... " @bind="Tweet" />

            <button type="submit" class="submit-btn" @onclick="GetAllAnalysisAsync">Submit</button>
        </div>
        <div class="analysis-output-container">
            @if(isLoading)
            {
                <div class="spinner"></div>
            }
            else
            {
                if(!isInitial && ClusterAndCount.Count > 0)
                {
                    <h4 class="results-announcement">The top three emotions are:</h4>
                    foreach(var emotion in ClusterAndCount.OrderByDescending(x => x.Value).Take(3).Select(x => x.Key).ToList())
                    {
                        <p class="results">@emotion</p>
                    }
                }
                else if(!isInitial && ClusterAndCount.Count == 0)
                {
                    <h4 class="results-announcement">No results to display.</h4>
                }
            }
            <p class="error-msg">@ErrorMsg</p>
        </div>
    </div>
    
    <p>@Test</p>
}
else
{
    <h1 class="authorization-message-header">Authorization is required to access your Spotify data.</h1>
    <p class="authorization-message-paragraph">If you want emotional analysis performed on your Spotify data, please click on the button to give MetaMood authorization to retrieve your saved tracks from Spotify.</p>
    <button type="submit" class="submit-btn" @onclick="GetSpotifyAccessTokenAsync">Get Spotify Authorization</button>
    <button type="submit" class="submit-btn skip-btn" @onclick="AnalyzeWithoutAuthorization">Skip</button>
}

@code {

    private readonly string _ClientID = "b4f82aba44b74f7caee510bd165499fa";

    public string? SpotifyID = null;

    public string? RedditID = null;

    public string? Tweet = null;

    public string? Test;

    public string? ErrorMsg;

    public bool isAuthorized = false;

    public bool isReady = false;

    public bool isSpotifyLoading = false;

    public bool isRedditLoading = false;

    public bool isTwitterLoading = false;

    public bool isLoading = false;

    public bool isInitial = true;

    public IDictionary<string, int> ClusterAndCount = new Dictionary<string, int>();

    protected override async Task OnInitializedAsync()
    {
        var fragment = Navigation.ToAbsoluteUri(Navigation.Uri).Fragment;

        if (fragment.Contains("access_token"))
        {
            isAuthorized = true;
            isReady = true;
            var accessToken = fragment.Split('&').FirstOrDefault(x => x.Contains("access_token"))?.Split('=')[1];
            await localStorage.SetItemAsStringAsync("access_token", accessToken);
            Navigation.NavigateTo("/analyze");
        }
    }

    public async Task GetAllAnalysisAsync()
    {
        isInitial = false;
        isLoading = true;
        ClusterAndCount.Clear();

        if(!string.IsNullOrEmpty(SpotifyID))
            await GetSpotifyDataAsync();

        if(!string.IsNullOrEmpty(RedditID))
            await GetRedditDataAsync();

        if (!string.IsNullOrEmpty(Tweet))
            await GetTwitterDataAsync();

        isLoading = false;

    }

    public void AnalyzeWithoutAuthorization()
    {
        isReady = true;
    }

    public async Task GetSpotifyAccessTokenAsync()
    {
        IDictionary<string, string> requestAccessTokenParameters = new Dictionary<string, string>();
        requestAccessTokenParameters.Add("redirect_uri", "https://ec2-3-238-222-13.compute-1.amazonaws.com/analyze");
        requestAccessTokenParameters.Add("client_id", _ClientID);
        requestAccessTokenParameters.Add("response_type", "token");
        requestAccessTokenParameters.Add("scope", "user-library-read");

        var dictFormUrlEncodedContent = new FormUrlEncodedContent(requestAccessTokenParameters);
        var queryString = await dictFormUrlEncodedContent.ReadAsStringAsync();
        var query = $"https://accounts.spotify.com/authorize?{queryString}";

        Navigation.NavigateTo(query);

    }


    private async Task GetSpotifyDataAsync()
    {
        isSpotifyLoading = true;
        HttpRequestMessage request = new(HttpMethod.Get, $"https://api.spotify.com/v1/me/tracks");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await localStorage.GetItemAsStringAsync("access_token"));

        HttpResponseMessage response = await httpClient.SendAsync(request);

        string rawTrackStrings = "";
        string userTracks = "";
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();

            string pattern = @"\/track\/[a-zA-Z0-9]+";
            MatchCollection matches = Regex.Matches(content, pattern);

            foreach (Match match in matches)
            {
                rawTrackStrings += match + ",";
            }
            userTracks = rawTrackStrings.Replace("/track/", "");

        }
        else
        {
            ErrorMsg = "ERROR: Something went wrong when retrieving user saved tracks.";
        }

        // remove the last comma
        int lastIndex = userTracks.LastIndexOf(',');
        if (lastIndex != -1)
        {
            userTracks = userTracks.Remove(lastIndex, 1);
        }

        request = new(HttpMethod.Get, $"https://api.spotify.com/v1/audio-features/?ids={userTracks}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", await localStorage.GetItemAsStringAsync("access_token"));
        response = await httpClient.SendAsync(request);

        IList<SpotifyAnalysisDTO>? tracks = new List<SpotifyAnalysisDTO>();
        if(response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            tracks = JObject.Parse(content)?.SelectToken("audio_features")?.ToObject<List<SpotifyAnalysisDTO>>();

        }
        else
        {
            ErrorMsg = "Failed to properly parse information from the API.";
        }

        string requestBody = JsonConvert.SerializeObject(tracks);
        requestBody = Regex.Replace(requestBody, "\"", "");
        requestBody = Regex.Replace(requestBody, ":", "");
        requestBody = Regex.Replace(requestBody, "{", "[");
        requestBody = Regex.Replace(requestBody, "}", "]");
        requestBody = Regex.Replace(requestBody, "[a-zA-Z]{2,}", "");

        HttpContent requestContent = new StringContent(requestBody, System.Text.Encoding.UTF8, "application/json");
        response = await httpClient.PostAsync("https://kdt48lmf8a.execute-api.us-east-1.amazonaws.com/analyze-individual-spotify", requestContent);


        string analysisResponse = string.Empty;
        if(response.IsSuccessStatusCode)
        {
            analysisResponse = await response.Content.ReadAsStringAsync();
        }
        else
        {
            ErrorMsg = "Spotify data analysis failed.";
        }

        IList<int>? spotifyData = JObject.Parse(analysisResponse)?.SelectToken("data")?.ToObject<List<int>>();
        SynthesizeData(spotifyData, typeof(SpotifyTrackDTO));

        isSpotifyLoading = false;

    }

    public async Task GetRedditDataAsync()
    {
        isRedditLoading = true;

        HttpRequestMessage request = new(HttpMethod.Get, $"https://www.reddit.com/user/{RedditID}/comments/.json?limit=100");
        HttpResponseMessage response = await httpClient.SendAsync(request);

        IList<string> comments = new List<string>();
        if(response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();

            JObject jsonObject = JObject.Parse(content);
            IEnumerable<JToken> bodyValues = jsonObject.SelectTokens("$..body");

            foreach (JToken token in bodyValues)
            {
                comments.Add(token.ToString());
            }

        }
        else
        {
            ErrorMsg = "Unable to retrieve reddit data.";
        }

        string requestBody = JsonConvert.SerializeObject(comments);

        HttpContent requestContent = new StringContent(requestBody, System.Text.Encoding.UTF8, "application/json");
        response = await httpClient.PostAsync("https://kdt48lmf8a.execute-api.us-east-1.amazonaws.com/text-analysis", requestContent);

        string analysisResponse = string.Empty;
        if (response.IsSuccessStatusCode)
        {
            analysisResponse = await response.Content.ReadAsStringAsync();
        }
        else
        {
            ErrorMsg = "Reddit data analysis failed.";
        }

        List<string>? redditData = JObject.Parse(analysisResponse)?.SelectToken("data")?.ToObject<List<string>>();
        SynthesizeData(redditData?.ConvertSentimentToAnalysis(), typeof(SpotifyTrackDTO));

        isRedditLoading = false;


    }

    public async Task GetTwitterDataAsync()
    {
        HttpContent requestContent = new StringContent(Tweet ?? "", System.Text.Encoding.UTF8, "application/json");
        HttpResponseMessage response = await httpClient.PostAsync("https://kdt48lmf8a.execute-api.us-east-1.amazonaws.com/text-analysis", requestContent);

        string analysisResponse = string.Empty;
        if (response.IsSuccessStatusCode)
        {
            analysisResponse = await response.Content.ReadAsStringAsync();
        }
        else
        {
            ErrorMsg = "Twitter data analysis failed.";
        }

        List<string>? twitterData = JObject.Parse(analysisResponse)?.SelectToken("data")?.ToObject<List<string>>();
        SynthesizeData(twitterData?.ConvertSentimentToAnalysis(), typeof(SpotifyTrackDTO));
    }

    public void SynthesizeData(IList<int>? data, Type t)
    {

        if (data is not null)
            foreach (var d in data)
            {
                if (!ClusterAndCount.ContainsKey(d.ToCluster(t)))
                    ClusterAndCount.Add(d.ToCluster(t), 1);
                else
                    ClusterAndCount[d.ToCluster(t)]++;
            }


    }

}
