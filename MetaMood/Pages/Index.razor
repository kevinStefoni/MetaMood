@page "/"
@inject IJSRuntime JsRuntime
@inject HttpClient httpClient

<PageTitle>MetaMood Dashboard</PageTitle>

<h1 id="greeting"></h1>

@if (IsSpotifyBarGraphReady && IsRedditBarGraphReady && IsSpotifyBarGraphReady && IsTwitterBarGraphReady)
{
    <div id="carouselExampleControls" class="carousel slide">
        <div class="carousel-inner">
            <div class="carousel-item active">
                <Chart Id="bar1" Type="@Chart.ChartType.Bar"
                   Data="@(SpotifyAverages)"
                   BackgroundColor="@(new[] { "purple" })"
                   Labels="@(Labels)"
                   Title="Average Spotify Audio Features">
                </Chart>
            </div>
            <div class="carousel-item">
                <Chart Id="bar4" Type="@Chart.ChartType.Bar"
                   Data="@(SpotifySums)"
                   BackgroundColor="@(new[] { "purple" })"
                   Labels="@(TextLabels)"
                   Title="Sum of Spotify Tracks For Each Emotion">
                </Chart>
            </div>
            <div class="carousel-item">
                <Chart Id="bar2" Type="@Chart.ChartType.Bar"
                   Data="@(RedditSums)"
                   BackgroundColor="@(new[] { "purple" })"
                   Labels="@(TextLabels)"
                   Title="Sum of Reddit Posts For Each Emotion">
                </Chart>
            </div>
            <div class="carousel-item">
                <Chart Id="bar3" Type="@Chart.ChartType.Bar"
                   Data="@(TwitterSums)"
                   BackgroundColor="@(new[] { "purple" })"
                   Labels="@(TextLabels)"
                   Title="Sum of Tweets For Each Emotion">
                </Chart>
            </div>
        </div>
        <a class="carousel-control-prev carousel-button carousel-control" href="#carouselExampleControls" role="button" data-slide="prev">
            <span class="oi oi-caret-left carousel-icon"></span>
        </a>
        <a class="carousel-control-next carousel-button carousel-control" href="#carouselExampleControls" role="button" data-slide="next">
            <span class="oi oi-caret-right carousel-icon"></span>
        </a>
    </div>


}
else
{
    <div class="spinner"></div>
}


@code {
    public string[]? Labels;
    public string[]? SpotifyAverages = { "0.00" };
    public string[]? SpotifySums = { "0.00" };
    public string[]? RedditSums = { "0.00" };
    public string[]? TwitterSums = { "0.00" };
    public string[]? TextLabels = { "Anger", "Fear", "Happy", "Love", "Sad", "Surprise" };

    public bool IsSpotifyBarGraphReady = false;
    public bool IsSpotifySumGraphReady = false;
    public bool IsRedditBarGraphReady = false;
    public bool IsTwitterBarGraphReady = false;

    protected async override Task OnInitializedAsync()
    {
        Labels = ChartService.GetLabels(typeof(SpotifyTrackDTO));

        var requestTable = new HttpRequestMessage(HttpMethod.Get, $"/average/spotify-tracks");
        HttpResponseMessage responseTable = await httpClient.SendAsync(requestTable);

        // If the response was successful, asynchronously read and deserialize the JSON into a list that will be sent to the bar graph
        if (responseTable.IsSuccessStatusCode)
        {
            SpotifyAverages = await responseTable.Content.ReadFromJsonAsync<string[]>();
            IsSpotifyBarGraphReady = true;
        }

        requestTable = new HttpRequestMessage(HttpMethod.Get, $"/sum/spotify");
        responseTable = await httpClient.SendAsync(requestTable);

        // If the response was successful, asynchronously read and deserialize the JSON into a list that will be sent to the bar graph
        if (responseTable.IsSuccessStatusCode)
        {
            SpotifySums = await responseTable.Content.ReadFromJsonAsync<string[]>();
            IsSpotifySumGraphReady = true;
        }

        requestTable = new HttpRequestMessage(HttpMethod.Get, $"/sum/reddit-comments");
        responseTable = await httpClient.SendAsync(requestTable);

        // If the response was successful, asynchronously read and deserialize the JSON into a list that will be sent to the bar graph
        if (responseTable.IsSuccessStatusCode)
        {
            RedditSums = await responseTable.Content.ReadFromJsonAsync<string[]>();
            IsRedditBarGraphReady = true;
        }

        requestTable = new HttpRequestMessage(HttpMethod.Get, $"/sum/tweets");
        responseTable = await httpClient.SendAsync(requestTable);

        // If the response was successful, asynchronously read and deserialize the JSON into a list that will be sent to the bar graph
        if (responseTable.IsSuccessStatusCode)
        {
            TwitterSums = await responseTable.Content.ReadFromJsonAsync<string[]>();
            IsTwitterBarGraphReady = true;
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("jsFunctions.TimedWelcome");
    }

}

