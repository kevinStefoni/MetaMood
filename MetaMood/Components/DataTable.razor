@using System.ComponentModel;
@inject HttpClient httpClient;
@inject IJSRuntime JsRuntime;

@typeparam T

@if(records is null)
{
    <div class="spinner"></div>
}
else
{
    if (ErrorMessage != string.Empty)
        records.Clear();

    <div class="entire-data-table-container">
        <div class="data-table-header">
            @if (isLoading)
            {
                <div class="mini-spinner"></div>
            }
            <span class="data-table-title">@Title</span>
            <div class="search-container">
                 @if (DataSetType is not null)
                 {
                    @foreach (PropertyDescriptor descriptor in TypeDescriptor.GetProperties(DataSetType))
                    {
                        if (descriptor.Attributes.Contains(new Searchable()))
                        {
                            <input type="text" class="search search-box" @onkeyup="@EnterAsync" @bind="Search" placeholder="Search by @(Services.SearchConvertor.DataSetTypeToSearchString(DataSetType))... " />
                        }

                    }
                 }
                
                <button class="search search-button oi oi-magnifying-glass" @onclick="HandleSearchAsync"></button>
            </div>
        </div>
        <div class="data-table-container">
            <table class="data-table">
                <thead>
                    <tr class="top-row">
                        @if(DataSetType is not null)
                        {
                            foreach (PropertyDescriptor descriptor in TypeDescriptor.GetProperties(DataSetType))
                            {
                                <td class="header-cell"><button class="table-head-button" id="@descriptor.Name" @onclick='() => HandleSortAsync(descriptor.Name)'>@descriptor.DisplayName</button></td>
                            }
                        }
                    </tr>
                </thead>
                <tbody>
                    @if (DataSetType is not null)
                    {
                        @foreach (var rec in records)
                        {
                            //var requestPageCount = new HttpRequestMessage(HttpMethod.Get, $"");
                            //HttpResponseMessage responsePageCount = httpClient.Send(requestPageCount);

                            // Check if the response has a success status code
                            //if (responsePageCount.IsSuccessStatusCode)
                            //{
                                
                            //}

                            <tr class="table-row">
                                @foreach (PropertyDescriptor descriptor in TypeDescriptor.GetProperties(DataSetType))
                                {
                                    if (descriptor.Attributes.OfType<UrlData>().FirstOrDefault() != null)
                                    {
                                        <td class="table-cell color-cell"><a href="@(descriptor.GetValue(rec))" target="_blank"><span class="oi oi-image img-icon"></span></a></td>
                                    }
                                    else if (descriptor.Attributes.Contains(new Cluster()))
                                    {
                                        <td class="table-cell emotion-cell"><div class="table-cell-container">@Convert.ToInt32(descriptor.GetValue(rec)).ToCluster(typeof(T))</div></td>
                                    }
                                    else if (descriptor.PropertyType == typeof(int?) || descriptor.PropertyType == typeof(double?))
                                    {
                                        <td class="table-cell num-cell"><div class="table-cell-container ">@descriptor.GetValue(rec)</div></td>
                                    }
                                    else
                                    {
                                        <td class="table-cell"><div class="table-cell-container">@filter.CensorString(descriptor.GetValue(rec)?.ToString())</div></td>
                                    }
                                }
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
        <div class="pagination-container">
            <span class="error-message">@ErrorMessage</span>
            <nav class="pagination-nav" aria-label="Table Pagination">
                <ul class="pagination pagination-ul">
                    
                    <li class="page-item">
                        <button class="page-link" aria-label="Previous" @onclick="PrevPages">
                            <span aria-hidden="true">&laquo;</span>
                        </button>
                    </li>
                    @for(int i = LowerPageIndex; i <= UpperPageIndex; i++)
                    {
                        {
                            int x = i;
                            string id = "pagination-button-" + x;
                            if(id.Equals(SelectedButtonId))
                            {
                                <li class="page-item numeric-page-item"><button class="page-link page-link-text page-button-active" id="@id" @onclick="() => GetPageAsync(x, id)">@i</button></li>
                            }
                            else
                            {
                                <li class="page-item numeric-page-item"><button class="page-link page-link-text" id="@id" @onclick="() => GetPageAsync(x, id)">@i</button></li>
                            }
                        }
                    }

                    <li class="page-item">
                        <button class="page-link" aria-label="Next" @onclick="NextPages">
                            <span aria-hidden="true">&raquo;</span>
                        </button>
                    </li>
                </ul>
            </nav>
        </div>
    </div>

}

@code {

    [Parameter]
    public Type? DataSetType { get; set; }

    [Parameter]
    public string? Title { get; set; }

    public const int PageSize = 10;

    public int PageCount { get; set; } = 1;

    public int InitialPageCount { get; set; } = 1;

    public int LowerPageIndex { get; set; } = 1;

    public int UpperPageIndex { get; set; } = 5;

    public int NumShownPages = 5;

    public string? TableName { get; set; }

    public SQLParameters QParameters = new SQLParameters();

    public IList<T>? records;

    public string? Search;

    public string? SelectedButtonId;

    public string? ErrorMessage;

    public bool isLoading = false;

    public ProfanityFilter filter = new ProfanityFilter();

    public string? Test;

    protected override async Task OnInitializedAsync()
    {
        SelectedButtonId = "pagination-button-1";

        // Set the page size
        QParameters.GetType().GetProperty("PageSize")?.SetValue(QParameters, PageSize);

        // Set the initial page to 1
        QParameters.GetType().GetProperty("PageNumber")?.SetValue(QParameters, 1);

        // Retrieve the type of the data that will be displayed in the table
        TableName = ParseComponentParameters.ParseTableFromType(DataSetType);

        // Make a request to the API to get the number of records for the given query
        var requestPageCount = new HttpRequestMessage(HttpMethod.Get, $"/count/{TableName}");
        HttpResponseMessage responsePageCount = await httpClient.SendAsync(requestPageCount);

        // Check if the response has a success status code
        if(responsePageCount.IsSuccessStatusCode)
        {

            // Extract the body of the successful response as a string asynchronously
            string responsePageCountBody = await responsePageCount.Content.ReadAsStringAsync();

            try
            {
                // Try to convert the count to an integer
                int numRecords = Convert.ToInt32(responsePageCountBody);

                // Set PageCount equal to how many pages it would take to display numRecords
                PageCount = GetPageCount(numRecords, PageSize);
            }
            catch{ ErrorMessage = "Failed to count all records in the table."; } // If an exception is thrown, PageCount will remain 1, which is how such an exception is intended to be handled
        }

        InitialPageCount = PageCount;

        // If NumShownPages is greater than PageCount, paging won't work, so reduce NumShownPages if there are few results
        // Also, adjust UpperPageIndex accordingly
        UpperPageIndex = (NumShownPages <= PageCount) ? NumShownPages : PageCount;

        await GetDataAsync();
    }

    /// <summary>
    /// This function changes the indices for paging to the previous NumShownPages.
    /// This function endures that if the UpperPageIndex is at the top and the top is not a multiple
    /// of NumShownPages that it subtracts enough to get it to the nearest multiple of NumShownPages,
    /// keeping the consistency of the paging.
    /// This function also ensures that the LowerPageIndex does not go below 1.
    /// </summary>
    public void PrevPages()
    {

        if(LowerPageIndex == 1)
        {
            UpperPageIndex = (NumShownPages <= PageCount) ? NumShownPages : PageCount;
            return;
        }
        else if(LowerPageIndex - NumShownPages < 1)
        {
            LowerPageIndex = 1;
            UpperPageIndex = (NumShownPages <= PageCount) ? NumShownPages : PageCount;
        }
        else
        {
            LowerPageIndex -= NumShownPages;
            UpperPageIndex -= NumShownPages;
        }
    }

    /// <summary>
    /// This function changes the indices for paging to the next NumShownPages.
    /// This function endures that the UpperPageIndex does not exceed PageCount; if adding NumShownPages
    /// to UpperPageIndex would make it exceed PageCount, then UpperPageIndex is simply set to PageCount.
    /// </summary>
    public void NextPages()
    {

        if(UpperPageIndex == PageCount)
        {
            return;
        }

        if (UpperPageIndex + NumShownPages <= PageCount)
        {
            LowerPageIndex += NumShownPages;
            UpperPageIndex += NumShownPages;
        }
        else
        {
            LowerPageIndex += NumShownPages;
            UpperPageIndex = PageCount;
        }
    }

    /// <summary>
    /// Set the page based on the option the user selected and make another call to the database
    /// </summary>
    /// <param name="pgNum">The page number that is to be retrieved</param>
    /// <returns>Nothing</returns>
    public async Task GetPageAsync(int pgNum, string id)
    {
        isLoading = true;
        SelectedButtonId = id;
        QParameters.GetType().GetProperty("PageNumber")?.SetValue(QParameters, pgNum);
        await GetDataAsync();
        isLoading = false;
    }

    /// <summary>
    /// This function sets the sort criteria and makes another call to the database.
    /// </summary>
    /// <param name="id">The name of the attribute by which the sort is to be done.</param>
    /// <returns>Nothing</returns>
    public async Task HandleSortAsync(string id)
    {
        isLoading = true;
        int wasActive = await JsRuntime.InvokeAsync<int>("SortingButtons", id);
        string SortByCriteria = (wasActive == 1) ? Services.ParseComponentParameters.GetDefaultSort(typeof(T)) ?? string.Empty : id;
        QParameters.GetType().GetProperty("SortBy")?.SetValue(QParameters, SortByCriteria);
        await GetDataAsync();
        isLoading = false;
    }

    /// <summary>
    /// This method simply handles when the user presses enter on the search box. 
    /// It will trigger the HandleSearchAsync() method, as if the user clicked on the search button. 
    /// </summary>
    /// <param name="e">The user pressed a key on the search box</param>
    /// <returns>Nothing</returns>
    public async Task EnterAsync(KeyboardEventArgs e)
    {

        if (e.Code == "Enter" || e.Code == "NumpadEnter" || e.Key == "Enter")
        {
            await HandleSearchAsync();
        }
    }

    /// <summary>
    /// This function sets the search criteria and makes another call to the database.
    /// </summary>
    /// <returns>Nothing</returns>
    public async Task HandleSearchAsync()
    {
        isLoading = true;

        if(Search != string.Empty)
            QParameters.GetType().GetProperty("Search")?.SetValue(QParameters, Search);
        else
            QParameters.GetType().GetProperty("Search")?.SetValue(QParameters, null);

        QParameters.GetType().GetProperty("PageNumber")?.SetValue(QParameters, 1);
        SelectedButtonId = "pagination-button-1";
        LowerPageIndex = 1;
        UpperPageIndex = NumShownPages;
        Test = "TEST: " + QParameters.Search;
        await GetDataAsync();
        isLoading = false;
    }

    /// <summary>
    /// This function makes a call to the database with all of the parameters that are set. 
    /// </summary>
    /// <returns>Nothing</returns>
    public async Task GetDataAsync()
    {

        var queryParameters = new Dictionary<string, string>();

        // use reflection to go through the parameters provided and add them as query parameters that will be encoded into the URL
        foreach (PropertyDescriptor descriptor in TypeDescriptor.GetProperties(typeof(SQLParameters)))
        {
            if(descriptor.GetValue(QParameters) != null)
            {
                queryParameters.Add(descriptor.Name, descriptor.GetValue(QParameters)?.ToString() ?? string.Empty);
            }
        }

        var dictFormUrlEncoded = new FormUrlEncodedContent(queryParameters);
        var queryString = await dictFormUrlEncoded.ReadAsStringAsync();
        var requestTable = new HttpRequestMessage(HttpMethod.Get, $"/{TableName}?{queryString}");
        HttpResponseMessage responseTable = await httpClient.SendAsync(requestTable);

        // If the response was successful, asynchronously read and deserialize the JSON into a list that will be displayed
        if (responseTable.IsSuccessStatusCode)
        {
            ErrorMessage = string.Empty;
            records = await responseTable.Content.ReadFromJsonAsync<IList<T>>();
            if (records is not null && queryParameters.ContainsKey("Search"))
            {
                var requestSearchCount = new HttpRequestMessage(HttpMethod.Get, $"/count/search/{TableName}?{queryString}");
                HttpResponseMessage responseSearchCount = await httpClient.SendAsync(requestSearchCount);
                string responseSearchCountBody = await responseSearchCount.Content.ReadAsStringAsync();
                if (responseSearchCount.IsSuccessStatusCode)
                {
                    try
                    {
                        PageCount = GetPageCount(Convert.ToInt32(responseSearchCountBody), PageSize);
                    } catch { ErrorMessage = "Failed to convert count of records to integer after search."; PageCount = 1; }
                }
                else
                {
                    ErrorMessage = "Failed to count records after search.";
                    PageCount = 1;
                }

                UpperPageIndex = (UpperPageIndex <= PageCount) ? UpperPageIndex : PageCount;
            }

            else
                PageCount = InitialPageCount;
        }
        else
        {
            ErrorMessage = await responseTable.Content.ReadAsStringAsync();
        }

    }

}
